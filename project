Symbol:
    1:直接返回 Symbol 的描述,description。
      let test = Symbol('foo')  ===> test.descrpition # 'foo'
    
  
      let obj = {}
      let a = Symbol('aaa')
      let b = Symbol('bbb')
      obj[a] = 'hello'
      obj[b] = 'hi'
      obj.name = 'kathy'
      
  2:Object.getOwnPropertySymbols(obj)   # 返回Symbol键名数组[Symbol(aaa), Symbol(bbbb)]
    
  3:Reflect.ownKeys(obj)  #返回所有键名数组[name, Symbol(aaa), Symbol(bbbb)]
  
  4:使用同一个 Symbol 值  Symbol.for('foo')
      let s1 = Symbol.for('foo')
      let s2 = Symbol.for('foo')
      s1 == s2  #true
  5:Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key
 
 Proxy:
    var proxy = new Proxy(target, handler);代理对象 target是要拦截的对象，handler是拦截的配置对象， Proxy 支持的拦截操作一览，一共 13 种。
        
        let obj = new Proxy({},{
          get:fucntion(){return 35}
        })
        obj.name  #35
 Reflect
    Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法，Reflect对象一共有 13 个静态方法。
    Reflect.apply(target, thisArg, args) #绑定this对象后执行给定函数
    Reflect.construct(target, args)  #同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法
    Reflect.get(target, name, receiver)  #查找并返回target对象的name属性
    Reflect.set(target, name, value, receiver)  #设置target对象的name属性等于value
    Reflect.defineProperty(target, name, desc) #对象定义属性
    Reflect.deleteProperty(target, name)  #删除对象的属性
    Reflect.has(target, name)   #对应name in obj里面的in运算符
    Reflect.ownKeys(target) #用于返回对象的所有属性
    Reflect.isExtensible(target) #当前对象是否可扩展
    Reflect.preventExtensions(target) #用于让一个对象变为不可扩展
    Reflect.getOwnPropertyDescriptor(target, name) #得到指定属性的描述对
    Reflect.getPrototypeOf(target)  #读取对象的__proto__属性
    Reflect.setPrototypeOf(target, prototype) #置目标对象的原型，返回一个布尔值
 
 Iterator 
    遍历器，当使用for...of循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口,默认的 Iterator 接口部署在数据结构的Symbol.iterator属性
    Symbol.iterator等于该对象的遍历器生成函数
 
 Generator 
    Generator生成器
    function与函数名之间，用*链接。   函数体内用yield产出   
    Generator函数的调用方法与普通函数调用方法相同，都是直接fn()，但是该调用不是函数执行，而是指向函数内部指针，
    需要调用next方法，每一个next都会按照顺序返回一个yield内容,yield表示暂停函数执行，而next是表示继续上一步继续执行。
    yield 跟return很像，返回yield后边的值，如果没有就是underfind,
    next是可以有参数的，next的参数就是执行yield后的值
    但是for...of循环可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法
    function* fn(){
       yield 'hello';
       var name = yield 'china';
       yield name
       return 'end'
    }
    let gene = fn()
    gene.next()   #{value:'hello',done:'false'}
    gene.next()   #{value:'china',done:'false'}
    gene.next('kathy')   #{value:'kathy',done:'false'}
    gene.next()   #{value:'end',done:'true'}
    
    #下面是一个利用 Generator 函数和for...of循环，
    function* fibo(){
      let [prev,curr] = [0,1]
      for(;;){
         yield curr
         [prev,curr] = [curr,prev+curr]
      }
    }
    for(let item of fibo()){
        if(item > 1000)break;
        console.log(item)
    }
    
    Generator方法：
    
    gene.return('主动终止generator函数并且返回该参数')
    gene.throw('new Error('出错了')是将yield表达式替换成一个throw语句')
 
 Generator自执行模块co，且co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象
 
 async函数
    async是Generator语法糖，就是将generator的yield 替换成 await，把*替换成 async,并且async内置执行器，
    await后边跟的是一个Promise对象，如果不是promise对象就直接返回值,
    有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try...catch结构里面
    async function f() {
      try {
        await Promise.reject('出错了');
      } catch(e) {
      }
      return await Promise.resolve('hello world');
    }
    
    f().then(v => console.log(v))
    
    
    for await...of用于遍历异步的 Iterator 接口
    
  
